{
  "name": "Pla",
  "tagline": "Pla is a simple library and ppx syntax extension to create composable templates based on verbatim strings",
  "body": "![Pla](/resources/pla.png?raw=true \"Pla\")\r\n\r\nPla is a simple library and ppx syntax extension to create composable templates based on verbatim strings.\r\n\r\n\r\n## Basic usage\r\n\r\nTo create templates from basic types you can use the following functions:\r\n\r\n```ocaml\r\nlet str_template   : Pla.t = Pla.string \"text\" ;;\r\nlet int_template   : Pla.t = Pla.int 1 ;;\r\nlet float_template : Pla.t = Pla.float 1.0 ;;\r\n```\r\nTemplates from verbatim strings are created using the markers `{pla|` to start the string and `|pla}` to close it. For example:\r\n\r\n```ocaml\r\nlet code_template : Pla.t = {pla| you can put anything \"here\" !!! |pla} ;;\r\n\r\n```\r\nTo compose templates you can use the special markers `<#` and `#>`. For example:\r\n```ocaml\r\nlet name  : Pla.t = Pla.string \"Bob\" ;;\r\nlet value : Pla.t = Pla.int 10 ;;\r\nlet text  : Pla.t = {pla|The name is <#name#> and the value is <#value#>|pla} ;;\r\n```\r\nWhen printing the template the markers `<#name#>` and `<#value#>` will be replaced by the contents of the templates `name` and `value` found in the scope.\r\n\r\n```ocaml\r\n# Pla.print text ;;\r\n- : bytes = \"The name is Bob and the value is 10\"\r\n```\r\n\r\nThere exist special markers to print values other than `Pla.t`. To print integers, strings and floats (without needing to convert them to template first) use the following markers:\r\n\r\n- `<#...#s>` for string values\r\n- `<#...#i>` for int values\r\n- `<#...#f>` for float values\r\n\r\nFor example:\r\n\r\n```ocaml\r\nlet name      : string = \"Bob\" ;;\r\nlet int_val   : int    = 10 ;;\r\nlet float_val : float  = 10.0 ;;\r\nlet text      : Pla.t  = {pla| String <#name#s>, int value <#int_val#i>, float value <#float_val#f>|pla} ;;\r\n```\r\n\r\nThis will produce the following string:\r\n```ocaml\r\n# Pla.print text ;;\r\n- : bytes = \"String Bob, int value 10, float value 10.0\"\r\n```\r\n\r\nThe markers are type-checked so if the types do not match you will get a compile error.\r\n\r\nThere are two special markers more:\r\n\r\n- `<#...#+>` this will indent all the contents of the template\r\n- `<#>` this will explicitly insert a new line\r\n\r\nFor example:\r\n```ocaml\r\nlet lines : Pla.t = {pla|Line 1<#>Line 2|pla} ;;\r\nlet text  : Pla.t = {pla|The lines are:<#lines#+>|pla} ;;\r\n```\r\n\r\nwill produce the text:\r\n```\r\nThe lines are:\r\n   Line 1\r\n   Line 2\r\n```\r\n\r\nThe Pla library provides a few useful functions\r\n- `join` : appends a list of templates.\r\n- `map_join` : applies the function `f` to each element and appends all the templates.\r\n- `map_sep` : applies the function `f` to each element and appends all the templates separated by the template `sep`.\r\n\r\nPla also provides a few predefined templates:\r\n- `unit` : empty template\r\n- `newline` : to print a new lines\r\n- `comma` : to print a comma\r\n- `semi` : to print a semicolon\r\n\r\nNote: You can find more information in the documentation.\r\n\r\nOne example of using the previous functions is the following:\r\n\r\n```ocaml\r\nlet data = [1; 2; 3] ;;\r\nlet text = Pla.map_sep Pla.comma Pla.int data ;; (* produces: 1,2,3 *)\r\n```\r\n\r\n#### Features and Limitations\r\n\r\nPla does not provide advanced pretty-printing features like the ones available in libraries like Format or others. On the other hand, it produces fast code whose performance is near to manually written code. Internally, every template is a function that writes text to a `Buffer.t`.\r\n\r\n## Installing\r\n\r\n```\r\n$ opam install pla\r\n```\r\n\r\n### Manual Installation\r\n\r\n```\r\n$ ./configure --prefix <#your ocaml directory#>\r\n$ make\r\n$ make install\r\n```\r\n\r\n### Requirements\r\n\r\n#### Compiler\r\n\r\n- OCaml      >= 4.02\r\n\r\n#### Libraries\r\n\r\n- cppo\r\n- ocamlfind\r\n- ocamlbuild\r\n\r\n\r\n## Syntax for Pla Templates\r\n\r\nTemplates are delimited by `{pla|` and `|pla}`.\r\n\r\n```ocaml\r\nlet _ = {pla|\r\nThis is a verbatim string.\r\nYou can put whatever text you want.\r\nThe compiler will create the corresponding string.\r\nYou don't need to escape the \"quotes\".\r\n|pla};;\r\n```\r\n\r\n#### Markers\r\n\r\nThe following markers in a `{pla|...|pla}` template are replaced:\r\n\r\n- `<#>`       - inserts a new line\r\n- `<#name#>`  - inserts the contents of a `Pla.t` value\r\n- `<#name#s>` - inserts the contents of a `string` value\r\n- `<#name#i>` - inserts the contents of a `int` value\r\n- `<#name#f>` - inserts the contents of a `float` value\r\n- `<#name#+>` - creates an indented block and print the contents of a `Pla.t` value\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}