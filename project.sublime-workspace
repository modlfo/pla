{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ele",
				"elem_typs"
			],
			[
				"getFun",
				"getFunctionSetType"
			],
			[
				"conve",
				"convertId"
			],
			[
				"get",
				"getFunction"
			],
			[
				"fun",
				"fun_to_fun"
			],
			[
				"conver",
				"convertType"
			],
			[
				"from_",
				"from_t"
			],
			[
				"new",
				"new_type"
			],
			[
				"Re",
				"Replacements"
			],
			[
				"cha",
				"chainAttempt"
			],
			[
				"re",
				"result"
			],
			[
				"repl",
				"repl1"
			],
			[
				"String",
				"StringMap"
			],
			[
				"call",
				"callExp"
			],
			[
				"add",
				"addBuiltin"
			],
			[
				"de",
				"default"
			],
			[
				"loo",
				"lookupRaise"
			],
			[
				"exit",
				"exitKind"
			],
			[
				"enter",
				"enterKind"
			],
			[
				"No",
				"Not_found"
			],
			[
				"ex",
				"exception"
			],
			[
				"type",
				"types"
			],
			[
				"mo",
				"modules"
			],
			[
				"func",
				"functions"
			],
			[
				"me",
				"mem_inst"
			],
			[
				"Con",
				"Constants"
			],
			[
				"Va",
				"Variable"
			],
			[
				"look",
				"lookupScope"
			],
			[
				"gate",
				"gate_value"
			],
			[
				"empty",
				"emptyAttr"
			],
			[
				"emp",
				"emptyAttr"
			],
			[
				"em",
				"emptyAttr"
			],
			[
				"Lexe",
				"LexerVultLR	"
			],
			[
				"Parser",
				"ParserVultLR	"
			],
			[
				"LBR",
				"LBRACKET"
			],
			[
				"Id",
				"IdMap	"
			],
			[
				"new_",
				"new_env	PassData.t VEnv.Env.t"
			],
			[
				"write",
				"write_pos"
			],
			[
				"writ",
				"write_pos"
			],
			[
				"star",
				"start_loc"
			],
			[
				"amp",
				"amp_a"
			],
			[
				"lfo_",
				"lfo_rate"
			],
			[
				"int",
				"int32_t"
			],
			[
				"ch",
				"chop_extension	string -> string"
			],
			[
				"iter",
				"iter2	('a -> 'b -> unit) -> 'a list -> 'b list -> unit"
			],
			[
				"para",
				"parameters	type parameters = { real : real_type; template : Templates.t; is_header : bool; }"
			],
			[
				"init",
				"init_fun_name	TypesVult.id"
			],
			[
				"ii",
				"init_fun	t -> TypesVult.id TypesVult.IdMap.t"
			],
			[
				"ini",
				"init_fun	t -> TypesVult.id TypesVult.IdMap.t"
			],
			[
				"ID",
				"IdTypeSet	"
			],
			[
				"RB",
				"RBRAC"
			],
			[
				"Print",
				"Printf	"
			],
			[
				"T",
				"TArrow	VType.t * VType.t * Loc.t option -> VType.vtype"
			],
			[
				"Typ",
				"TypeSet	"
			],
			[
				"Tem",
				"TemplNone	templates"
			],
			[
				"change",
				"change_a"
			],
			[
				"pas",
				"pass1	pass_options -> bool"
			],
			[
				"close",
				"close_out	out_channel -> unit"
			],
			[
				"open",
				"open_out	string -> out_channel"
			],
			[
				"level",
				"level2	int option"
			],
			[
				"ge",
				"getContext	'a VEnv.Env.t -> TypesVult.id -> TypesVult.id"
			],
			[
				"mapp",
				"mapper_func	type ('data, 'kind) mapper_func = ('data -> 'kind -> 'data * 'kind) option"
			],
			[
				"uni",
				"unifyRaise	Loc.t Lazy.t -> VType.t -> VType.t -> unit"
			],
			[
				"unify",
				"unifyReturn	Loc.t Lazy.t -> return_type -> return_type -> return_type"
			],
			[
				"id",
				"idStr	string list -> string"
			],
			[
				"getP",
				"getPathAndType	Scope.t -> TypesVult.path * VType.t"
			],
			[
				"elesm",
				"elems'	TypesVult.exp list"
			],
			[
				"alt",
				"alt_rest	TypesVult.vtype list"
			],
			[
				"pre",
				"pre_x"
			],
			[
				"primE",
				"primExitOperators	t -> t -> t"
			],
			[
				"In",
				"Invalid_argument	string -> exn"
			],
			[
				"find",
				"findMemInst	t -> TypesVult.id -> (TypesVult.path * TypesVult.vtype) option"
			],
			[
				"getM",
				"getMemInst	t -> t TypesVult.IdMap.t"
			],
			[
				"prim",
				"primExitMemInts	t -> t -> t"
			],
			[
				"M",
				"MemSymbol	symbol_kind"
			],
			[
				"primt",
				"primExitFunction	t -> t -> t"
			],
			[
				"Fun",
				"FunctionSymbol	symbol_kind"
			],
			[
				"kin",
				"kind_path	TypesVult.path"
			],
			[
				"print",
				"print_endline	string -> unit"
			],
			[
				"t",
				"to_string	Loc.t -> string"
			],
			[
				"e1",
				"e1_typ	TypesVult.vtype"
			],
			[
				"exp",
				"expLoc	TypesVult.exp -> Loc.t lazy_t"
			],
			[
				"args",
				"args_typ	TypesVult.vtype list"
			],
			[
				"n_",
				"n_fn_args	int"
			],
			[
				"arg",
				"args_typ	TypesVult.vtype list"
			],
			[
				"fn",
				"fn_type	TypesVult.vtype"
			],
			[
				"fo",
				"for_all2	('a -> 'b -> bool) -> 'a list -> 'b list -> bool"
			],
			[
				"from",
				"fromLhsExp	TypesVult.lhs_exp -> Loc.t"
			],
			[
				"Get",
				"GetLocation	"
			],
			[
				"boo",
				"bool_type	unit -> TypesVult.vtype_c ref"
			],
			[
				"make",
				"makeNewContext	'a t -> 'a t"
			],
			[
				"num",
				"num_num_num	TypesVult.vtype_c ref"
			],
			[
				"en",
				"enterFunction	'a t -> TypesVult.id -> 'a t"
			],
			[
				"optio",
				"optional_type	bool"
			],
			[
				"op",
				"op_type	TypesVult.type_ref"
			],
			[
				"set",
				"setCurrentType	'a VEnv.Env.t -> TypesVult.type_ref -> 'a VEnv.Env.t"
			],
			[
				"typ",
				"typ	TypesVult.type_ref"
			],
			[
				"ent",
				"enterBlock	Scope.t -> Scope.t"
			],
			[
				"loc",
				"locals	t -> t TypesVult.IdMap.t list"
			],
			[
				"lo",
				"locals	t -> t TypesVult.IdMap.t list"
			],
			[
				"type_",
				"type_ref	type type_ref = TypesVult.type_exp ref"
			],
			[
				"Stmt",
				"StmtType	TypesVult.id * TypesVult.typed_id list * TypesVult.val_decl list * TypesVult.attr -> TypesVult.stmt"
			],
			[
				"infer",
				"inferStmt	env -> TypesVult.type_ref option -> TypesVult.stmt -> TypesVult.stmt * env * TypesVult.type_ref option"
			],
			[
				"cond",
				"cond_type	TypesVult.type_ref"
			],
			[
				"unit",
				"unit_type	TypesVult.type_exp ref"
			],
			[
				"bod",
				"body_ret	TypesVult.type_ref option"
			],
			[
				"inferS",
				"inferStmtList	Inference.env -> TypesVult.type_ref option -> TypesVult.stmt list -> TypesVult.stmt list * Inference.env * TypesVult.type_ref option"
			],
			[
				"StmtB",
				"StmtBlock	TypesVult.id option * TypesVult.stmt list * TypesVult.attr -> TypesVult.stmt"
			],
			[
				"un",
				"unit_type	TypesVult.type_exp ref"
			],
			[
				"u",
				"unit_type	TypesVult.type_exp ref"
			],
			[
				"tye",
				"type_ref	type type_ref = TypesVult.type_exp ref"
			],
			[
				"else",
				"else_type	TypesVult.type_ref"
			],
			[
				"then",
				"then_type	TypesVult.type_ref"
			],
			[
				"a",
				"assoc	'a -> ('a * 'b) list -> 'b"
			],
			[
				"PU",
				"PUnit	TypesVult.attr -> TypesVult.exp"
			],
			[
				"W",
				"WILD	ParserTypes.token_enum"
			],
			[
				"elem",
				"elems2	TypesVult.type_exp ref list"
			],
			[
				"i",
				"iter2	('a -> 'b -> unit) -> 'a list -> 'b list -> unit"
			],
			[
				"lhs_ex",
				"lhs_exp	type lhs_exp = LWild of TypesVult.attr | LId of TypesVult.id * TypesVult.type_ref option * TypesVult.attr | LTuple of TypesVult.lhs_exp list * TypesVult.attr | LTyped of TypesVult.lhs_exp * TypesVult.type_ref * TypesVult.attr"
			],
			[
				"string",
				"string_of_int	int -> string"
			],
			[
				"rhs",
				"rhs_id	TypesVult.IdSet.t"
			],
			[
				"L",
				"LTuple	TypesVult.lhs_exp list * TypesVult.attr -> TypesVult.lhs_exp"
			],
			[
				"Jn",
				"JENewObj	jsexp"
			],
			[
				"ctx",
				"ctx_name	string list"
			],
			[
				"printStmt",
				"printStmtList	PrintBuffer.print_buffer -> jsstmt list -> unit"
			],
			[
				"convert",
				"convertStmt	TypesVult.stmt -> jsstmt"
			],
			[
				"stmt",
				"stmts	jsstmt list"
			],
			[
				"JSB",
				"JSBlock	jsstmt list -> jsstmt"
			]
		]
	},
	"buffers":
	[
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 4129,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 107.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"m",
				"Set Syntax: LaTeX Memoir"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Snippet: htm",
				"Snippet: htmlboiler"
			],
			[
				"markdo",
				"GitHub Flavored Markdown: Preview"
			],
			[
				"aaa",
				"z:AAAPackageDev: Convert (YAML, JSON, PList) toâ€¦"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"sni",
				"Snippet: html"
			],
			[
				"Snippet: ",
				"Snippet: htmlboiler"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			]
		],
		"width": 539.0
	},
	"console":
	{
		"height": 258.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/leonardo/Development/pla/lib/Pla.mli",
		"/Users/leonardo/Development/pla/README.md",
		"/Users/leonardo/.bash_profile",
		"/Users/leonardo/Development/wsm/WSMBuildDeps/OSX/wsmvars64-qt5.sh",
		"/Users/leonardo/Development/vult/src/generators/vultCh.ml",
		"/Users/leonardo/Development/vult/runtime/vultin.h",
		"/Users/leonardo/Development/vult/out.txt",
		"/Users/leonardo/Development/vult/_oasis",
		"/Users/leonardo/Downloads/wolfram-vpn.ovpn",
		"/Users/leonardo/Development/vult/src/core/VEnv.ml",
		"/Users/leonardo/Development/vult/src/generators/vultJs.ml",
		"/Users/leonardo/Development/vult/.merlin",
		"/Users/leonardo/Development/vult/src/core/common.ml",
		"/Users/leonardo/Development/vult/src/core/mapper.ml",
		"/Users/leonardo/Development/vult/src/passes/passes.ml",
		"/Users/leonardo/Development/vult/src/core/inference.ml",
		"/Users/leonardo/Development/vult/test.vult",
		"/Users/leonardo/Development/vult/src/core/VType.ml",
		"/Users/leonardo/Development/vult/myocamlbuild.ml",
		"/Users/leonardo/Development/vult/_tags",
		"/Users/leonardo/Development/vult/setup.ml",
		"/Users/leonardo/Development/temp/kkk.ml",
		"/Users/leonardo/Development/wsm/synch.sh",
		"/Users/leonardo/Development/fix24r/fix24test.re",
		"/Users/leonardo/Development/vult/.travis-ocaml.sh",
		"/Users/leonardo/Development/vult/examples/web/synth1.vult",
		"/Users/leonardo/Development/vult/examples/web/synth2.vult",
		"/Users/leonardo/Development/vult/examples/web/vultdemo.vult",
		"/Users/leonardo/Development/vult/test/test.ml",
		"/Users/leonardo/Development/wsm/cover/mybuild.sh",
		"/Users/leonardo/Development/vult/src/parser/ParserVultLR.mly",
		"/Users/leonardo/Development/vult/src/parser/LexerVultLR.mll",
		"/Users/leonardo/Development/vult/src/parser/parserVult.ml",
		"/Users/leonardo/Development/vult/test/parser/stmt_functions.vult",
		"/Users/leonardo/Development/vult/src/parser/ParserVultLR.ml",
		"/Users/leonardo/Development/vult/src/parser/TokensLR.ml",
		"/Users/leonardo/Development/teensy/drum/main.cpp",
		"/Users/leonardo/Development/teensy/drum/drum.vult",
		"/Users/leonardo/Development/vult/src/parser/lexerVultLR.mll",
		"/Users/leonardo/Development/vult/src/core/typesVult.ml",
		"/Users/leonardo/Development/vult/src/util/loc.ml",
		"/Users/leonardo/Development/vult/examples/filters.vult",
		"/Users/leonardo/Development/vult/examples/web/delay.vult",
		"/Users/leonardo/Development/wsm/WSMKernel/Compiler/Backend/drums.vult",
		"/Users/leonardo/Development/vult/src/vultc.ml",
		"/Users/leonardo/Development/vult/src/driver.ml",
		"/Users/leonardo/Development/temp/kkk.vult",
		"/Users/leonardo/Development/temp/dos.vult",
		"/Users/leonardo/Development/temp/uno.vult",
		"/Users/leonardo/Library/Application Support/Sublime Text 3/Packages/User/trailing_spaces.sublime-settings",
		"/Users/leonardo/Library/Application Support/Sublime Text 3/Packages/HighlightWhitespaces/README.md",
		"/Users/leonardo/Library/Application Support/Sublime Text 3/Packages/User/highlight_whitespaces.sublime-settings",
		"/Users/leonardo/Library/Application Support/Sublime Text 3/Packages/HighlightWhitespaces/highlight_whitespaces.sublime-settings",
		"/Users/leonardo/Development/vult/README.md",
		"/Users/leonardo/Development/vult/src/parser/parserTypes.ml",
		"/Users/leonardo/Development/vult/src/parser/lexerVult.mll",
		"/Users/leonardo/Development/vult/examples/monoin.vult",
		"/Users/leonardo/Development/vult/examples/voice.vult",
		"/Users/leonardo/Development/vult/test/passes/external_calls.vult",
		"/Users/leonardo/Development/vult/test/parser/stmt_external.vult",
		"/Users/leonardo/Development/vult/test/parser/exp_array.vult",
		"/Users/leonardo/Development/vult_site/javascripts/audio.js",
		"/Users/leonardo/Development/vult/runtime/vultin.c",
		"/Users/leonardo/Development/vult/examples/web/phasedist.vult",
		"/Users/leonardo/Development/vult/src/core/printTypes.ml",
		"/Users/leonardo/Development/vult/src/util/error.ml",
		"/Users/leonardo/Development/temp/po.vult",
		"/Users/leonardo/Development/wsm/cover/parser/metaLexer.mll",
		"/Users/leonardo/Development/vult/test/parser/exp_precedence.vult",
		"/Users/leonardo/Development/vult/_none_",
		"/Users/leonardo/Development/vult/scripts/build_node.sh",
		"/Users/leonardo/Development/vult/scripts/runtests.sh",
		"/Users/leonardo/Development/teensy-vult/vult-voice/voice_wrapper.h",
		"/Users/leonardo/Development/teensy-vult/vult-voice/vult-voice.ino",
		"/Users/leonardo/Development/teensy-vult/vult-voice/voice_wrapper.cpp",
		"/Applications/Arduino.app/Contents/Java/hardware/teensy/avr/boards.txt",
		"/Applications/Arduino.app/Contents/Java/hardware/teensy/avr/platform.txt",
		"/Applications/Arduino.app/Contents/Java/hardware/platform.txt",
		"/Users/leonardo/Development/teensy-vult/vult-voice/voice.cpp",
		"/Users/leonardo/Development/vult/examples/adsr.vult",
		"/Users/leonardo/Development/teensy-vult/vult-voice/vultin.h",
		"/Users/leonardo/Development/teensy-vult/voice.c.back.c",
		"/Users/leonardo/Development/vult/examples/blit.vult",
		"/Users/leonardo/Development/vult/examples/state_variable.vult",
		"/Users/leonardo/Development/vult/examples/sin.vult",
		"/Users/leonardo/Development/vult/test/passes/simplify.vult",
		"/Users/leonardo/Development/vult/test/passes/simplify.base",
		"/Users/leonardo/Development/temp/kk/voice.cpp",
		"/Users/leonardo/Development/temp/kk/voice.ll",
		"/Users/leonardo/Development/temp/kk/main.cpp",
		"/Users/leonardo/Development/vult/test/code/adsr.cpp.fixed.base",
		"/Users/leonardo/Development/vult/test/code/adsr.h.fixed.base",
		"/Users/leonardo/Development/vult/vult_node.js",
		"/Users/leonardo/Development/vult/test/code/adsr.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/blit.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/filters.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/moog_filter.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/sin.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/state_variable.cpp.float.base",
		"/Users/leonardo/Development/vult/test/code/voice.cpp.float.base",
		"/Users/leonardo/Development/vult/src/util/printBuffer.ml",
		"/Users/leonardo/Development/wsm/WSMKernel/Compiler/Backend/ParserExt.ml",
		"/Users/leonardo/Development/wsm/WSMKernel/Compiler/Backend/SettingsMC.ml",
		"/var/folders/zw/6fvbhb1n1fv4ncv_lkbl24400000gn/T/filters.h",
		"/Users/leonardo/Development/vult/examples/moog_filter.vult",
		"/Users/leonardo/Development/vult/test/exec.ml",
		"/Users/leonardo/Development/temp/kk/main.h",
		"/Users/leonardo/Development/vult/.travis-vult.sh",
		"/Users/leonardo/Development/teensy-braids/my_environment_back.sh",
		"/Users/leonardo/Development/teensy-braids/Makefile",
		"/Users/leonardo/Development/teensy-braids/main.cpp",
		"/Users/leonardo/Development/teensy-braids/main.",
		"/Users/leonardo/Development/ocamldebug.js/index.html",
		"/Users/leonardo/Development/vult/.travis.yml",
		"/Users/leonardo/Development/vult/.travis-ci.sh",
		"/Users/leonardo/Development/vult/src/parser/tokenStream.ml",
		"/Users/leonardo/Development/vult/test/parser/stmt_functions.base",
		"/Users/leonardo/Development/vult/test/passes/tuple_assign.vult",
		"/Users/leonardo/Development/vult/test/passes/tuple_assign.base",
		"/Users/leonardo/Development/wsm/code/main.ml",
		"/Users/leonardo/Development/wsm/code/run.sh",
		"/Users/leonardo/Development/wsm/code/restore.sh",
		"/Users/leonardo/Development/wsm/code/myocamlbuild.ml",
		"/Users/leonardo/Development/wsm/myenvironment.sh",
		"/Users/leonardo/Development/vult/test/passes/context_simple.base",
		"/Users/leonardo/Development/temp/kk/main.ll",
		"/Users/leonardo/Development/node/electron-quick-start/midi.js",
		"/Users/leonardo/Development/node/electron-quick-start/main.js"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*.ml",
			"*",
			"src/*.ml",
			"*.ml",
			"*.vult",
			"*",
			"*.ml",
			"*",
			"*.ml",
			"",
			"*.ml",
			"",
			"*.ml",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			": t",
			"Vult",
			"set",
			"makeFunctionName",
			"convertId",
			"op_to_fun",
			"convertOperator",
			"isReal",
			"isValue",
			"from_fixed",
			"to_fixed",
			"convertType",
			"type parameters",
			"addReplacements",
			"float",
			"takeLast",
			"addCasts",
			"addTypes",
			"addKeywords",
			"replacements",
			"chainAttempt",
			"chainAttempt2",
			"chainAttempt",
			"StringPairMap",
			"StringMap",
			"string -> string -> string option",
			"string -> string option",
			"source",
			"fn",
			"given the replacement",
			"op_to_function",
			"real",
			"switch",
			"default",
			"CENewObj",
			"Env.set",
			"Env.get",
			"{ emptyAttr with typ = Some(tp)}",
			"Env.set",
			"CC",
			"pathFromCurrent",
			"generateInstanceName",
			"getMemAndInstances",
			"getContext",
			"not_found",
			"getInitFunction",
			"isActiveFunction",
			"Scope.isActive",
			"isActive",
			"pathFromCurrent",
			"mem_inst",
			"getPath",
			"getParent",
			"findModule",
			"getParent",
			"Env.exit",
			"enterAny",
			"t.",
			"`Module",
			"`Type",
			"`Function",
			"`Block",
			"`Operator",
			"`Function",
			"`Variable",
			"`Type",
			"`Function",
			"`Type",
			"type,",
			"Type,",
			"Type",
			"`Operator",
			"`Function",
			"`Type",
			"builtin_table",
			"Symbol",
			"ppx",
			"Env.loo",
			"Function",
			"Env.lookup",
			"String.uppercase",
			"getMemAndInstances",
			"getFunctionMemInst",
			"getMemAndInstances",
			"Env.enter",
			"inferStmtList",
			"lookup",
			"Env.enter",
			"VEnv.enter",
			"addInstance",
			"loc;",
			"loc",
			"(loc:Loc.t)",
			"enterAny",
			"empty with",
			"4.03.0+beta1",
			"Simplify",
			"Compiler/",
			"OMCLibrary/Code/",
			"/Code/",
			"OMCLibrary/Code/",
			"ATTR",
			"ID",
			"return",
			"bin_op",
			"type_",
			"typesVult",
			"ppx",
			"makeToken EOF lexbuf",
			"makeToken OP lexbuf",
			"makeToken",
			"lines",
			"newLineInBuffer",
			"nsepseq",
			"sepseq",
			"tuple",
			"sepseq",
			"nsepseq",
			"Passes.default_options",
			"pass1_options",
			"PassesTest",
			"mapper_opt",
			"loop",
			"Env.exit",
			"enterAny",
			"ModuleSymbol",
			"Function",
			"UnlinkTypes"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"-O3",
			"int_clip",
			"float_clip",
			"type_kind",
			"BFract",
			"BReal",
			"BInt",
			"id",
			"Loc.",
			"('exp, 'kind) token",
			"('exp, 'kind) lexer_stream",
			"Location.t",
			"\\\\n",
			"\\\\\\n",
			" ",
			"\\\\\\n",
			"\\n\\",
			"TAB\nTAB\nTABLE",
			"TAB\nTAB\nStmtTable",
			"DeclaredF",
			"BuiltinF",
			"(x:process"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4129,
						"regions":
						{
						},
						"selection":
						[
							[
								3703,
								3703
							]
						],
						"settings":
						{
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai (SL).tmTheme",
							"spell_check": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2302.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/oasis.sublime-build",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"read",
				"README.md"
			],
			[
				"plalex",
				"lib/PlaLex.mll"
			],
			[
				"vultch",
				"src/generators/vultCh.ml"
			],
			[
				"oass",
				"_oasis"
			],
			[
				"vultin",
				"runtime/vultin.h"
			],
			[
				"oasis",
				"_oasis"
			],
			[
				"genc",
				"src/generators/vultCh.ml"
			],
			[
				"myocaml",
				"myocamlbuild.ml"
			],
			[
				"_tags",
				"_tags"
			],
			[
				".merlin",
				".merlin"
			],
			[
				"vtype",
				"src/core/VType.ml"
			],
			[
				"ven",
				"src/core/VEnv.ml"
			],
			[
				"travis",
				".travis-ocaml.sh"
			],
			[
				"venv",
				"src/core/VEnv.ml"
			],
			[
				"synth2",
				"examples/web/synth2.vult"
			],
			[
				"synt",
				"examples/web/synth1.vult"
			],
			[
				"test",
				"test/test.ml"
			],
			[
				"passes",
				"src/passes/passes.ml"
			],
			[
				"parser",
				"src/parser/parserVult.ml"
			],
			[
				"lexervul",
				"src/parser/LexerVultLR.mll"
			],
			[
				"types",
				"src/core/typesVult.ml"
			],
			[
				"myo",
				"myocamlbuild.ml"
			],
			[
				"filter",
				"examples/filters.vult"
			],
			[
				"synth",
				"examples/web/synth1.vult"
			],
			[
				"mapper",
				"src/core/mapper.ml"
			],
			[
				"",
				"src/core/VEnv.ml"
			],
			[
				"maper",
				"src/core/mapper.ml"
			],
			[
				"inferen",
				"src/core/inference.ml"
			],
			[
				"vultc",
				"src/vultc.ml"
			],
			[
				"lexer",
				"src/parser/lexerVult.mll"
			],
			[
				"parse",
				"src/parser/parserVult.ml"
			],
			[
				"delay",
				"examples/web/delay.vult"
			],
			[
				"voice",
				"examples/voice.vult"
			],
			[
				"monoin",
				"examples/monoin.vult"
			],
			[
				"vtyp",
				"src/core/VType.ml"
			],
			[
				"infe",
				"src/core/inference.ml"
			],
			[
				"test.ml",
				"test/test.ml"
			],
			[
				"js",
				"src/generators/vultJs.ml"
			],
			[
				"parservult",
				"src/parser/parserVult.ml"
			],
			[
				"infere",
				"src/core/inference.ml"
			],
			[
				"vulti",
				"runtime/vultin.c"
			],
			[
				"erro",
				"src/util/error.ml"
			],
			[
				"po",
				"~/Development/temp/po.vult"
			],
			[
				"stmt",
				"test/parser/stmt_external.vult"
			],
			[
				"arser",
				"src/parser/parserVult.ml"
			],
			[
				"oas",
				"_oasis"
			],
			[
				"mono",
				"examples/monoin.vult"
			],
			[
				"mon",
				"examples/monoin.vult"
			],
			[
				"comm",
				"src/core/common.ml"
			],
			[
				"vult",
				"src/generators/vultCh.ml"
			],
			[
				"mappe",
				"src/core/mapper.ml"
			],
			[
				"printty",
				"src/core/printTypes.ml"
			],
			[
				"inference",
				"src/core/inference.ml"
			],
			[
				"typesvu",
				"src/core/typesVult.ml"
			],
			[
				"lex",
				"src/parser/lexerVult.mll"
			],
			[
				"par",
				"src/parser/parserTypes.ml"
			],
			[
				"runt",
				"scripts/runtests.sh"
			],
			[
				"scrip",
				"scripts/build_node.sh"
			],
			[
				"rea",
				"README.md"
			],
			[
				"voie",
				"examples/voice.vult"
			],
			[
				"vulth",
				"runtime/vultin.h"
			],
			[
				"vultin.c",
				"runtime/vultin.c"
			],
			[
				"web",
				"examples/web/phasedist.vult"
			],
			[
				"sin",
				"examples/sin.vult"
			],
			[
				"vultjs",
				"src/generators/vultJs.ml"
			],
			[
				"passe",
				"src/passes/passes.ml"
			],
			[
				"readme",
				"README.md"
			],
			[
				"type",
				"src/core/typesVult.ml"
			],
			[
				"vultc.ml",
				"src/vultc.ml"
			],
			[
				"driver",
				"src/driver.ml"
			],
			[
				"typesv",
				"src/core/typesVult.ml"
			],
			[
				"blit",
				"examples/blit.vult"
			],
			[
				"vultc.",
				"src/vultc.ml"
			],
			[
				"kkk",
				"~/Development/temp/kkk.vult"
			],
			[
				"typ",
				"src/core/typesVult.ml"
			],
			[
				"t",
				"_tags"
			],
			[
				"tup",
				"test/passes/tuple_assign.base"
			],
			[
				"context",
				"test/passes/context_simple.base"
			],
			[
				"tuple",
				"test/passes/tuple_assign.base"
			],
			[
				"print",
				"src/core/printTypes.ml"
			],
			[
				"tuplea",
				"test/passes/tuple_assign.vult"
			],
			[
				"tuple_",
				"test/passes/tuple_assign.vult"
			],
			[
				"inf",
				"src/core/inference.ml"
			],
			[
				"top.ml",
				"vulttop.mltop"
			],
			[
				"vtype.",
				"src/core/VType.ml"
			],
			[
				"vult_n",
				"src/vult_node.ml"
			],
			[
				"error",
				"src/util/error.ml"
			],
			[
				".mer",
				".merlin"
			],
			[
				"graph",
				"src/util/graphWrapper.ml"
			],
			[
				"parserut",
				"src/parser/parserVult.ml"
			],
			[
				"common",
				"src/core/common.ml"
			],
			[
				"worker-vul",
				"javascripts/external/ace/worker-vult.js"
			],
			[
				"worker-vult",
				"javascripts/external/ace/worker-vult.js"
			],
			[
				"moo",
				"examples/moog_filter.vult"
			],
			[
				"env",
				"src/core/VEnv.ml"
			],
			[
				"script/buil",
				"scripts/build_node.sh"
			],
			[
				"no",
				"vult_node.ml"
			],
			[
				"scripts/",
				"scripts/build_node.sh"
			],
			[
				"lexervult",
				"src/parser/lexerVult.mll"
			],
			[
				"printt",
				"src/core/printTypes.ml"
			],
			[
				"loc",
				"src/util/loc.ml"
			],
			[
				"paeser",
				"src/parser/parserVult.ml"
			],
			[
				"curre",
				"test/current.vult"
			],
			[
				"ocam",
				".ocamlinit"
			],
			[
				"ocaml",
				".ocamlinit"
			],
			[
				"stream",
				"src/parser/tokenStream.ml"
			],
			[
				"cons",
				"src/core/constants.ml"
			],
			[
				"en",
				"src/core/vEnv.ml"
			],
			[
				"consta",
				"src/core/constants.ml"
			],
			[
				"dsp",
				"test/dsp1.vult"
			],
			[
				"dsp1",
				"test/dsp1.vult"
			],
			[
				"ta",
				"_tags"
			],
			[
				"loc.ml",
				"src/util/loc.ml"
			],
			[
				"mapp",
				"src/core/mapper.ml"
			],
			[
				"pass",
				"src/passes.ml"
			],
			[
				"curr",
				"test/current.vult"
			],
			[
				"dsp.",
				"test/dsp1.vult"
			],
			[
				"infer",
				"src/core/inference_form.ml"
			],
			[
				"ini",
				"toplevel.init"
			],
			[
				"loc.",
				"src/util/loc.ml"
			],
			[
				"env.ml",
				"src/core/env.ml"
			],
			[
				"out.",
				"out.vult"
			],
			[
				"out",
				"out.vult"
			],
			[
				"typesvul",
				"src/core/typesVult.ml"
			],
			[
				"printtype",
				"src/core/printTypes.ml"
			],
			[
				"sym",
				"src/core/simplify.ml"
			],
			[
				"passes.ml",
				"src/passes.ml"
			],
			[
				"typevul",
				"src/core/typesVult.ml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 87.0,
		"last_filter": "delay",
		"selected_items":
		[
			[
				"delay",
				"delay"
			],
			[
				"unl",
				"unlink"
			],
			[
				"last",
				"pathLast"
			],
			[
				"smoo",
				"smooth"
			],
			[
				"gett",
				"getTypes"
			],
			[
				"getini",
				"getInitValue"
			],
			[
				"typstr",
				"typeStr"
			],
			[
				"phas",
				"phasor"
			],
			[
				"join",
				"join"
			],
			[
				"getlo",
				"getExpLocation"
			],
			[
				"loca",
				"location"
			],
			[
				"traverseStmtList",
				"traverseStmtList"
			],
			[
				"merge",
				"mergeTypes"
			],
			[
				"process",
				"processArguments"
			],
			[
				"trivial",
				"trivial"
			],
			[
				"coll",
				"collectTableDefinitions"
			],
			[
				"simplify",
				"simplifySequenceBindings"
			],
			[
				"names",
				"nameLocalScopes"
			],
			[
				"make",
				"makeIfStatement"
			],
			[
				"generateInitialization",
				"generateInitialization"
			],
			[
				"buil",
				"isBuiltinType"
			],
			[
				"sort",
				"sortTypes"
			],
			[
				"convertst",
				"convertStmt"
			],
			[
				"pseq",
				"simplifySequenceBindings"
			],
			[
				"isac",
				"isActiveFunction"
			],
			[
				"id",
				"getIdentifier"
			],
			[
				"getid",
				"getId"
			],
			[
				"builtin",
				"Builtin"
			],
			[
				"getids",
				"getIdsInExp"
			],
			[
				"",
				"MEM"
			],
			[
				"weight",
				"getExpListWeight"
			],
			[
				"str",
				"toString"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 210.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
